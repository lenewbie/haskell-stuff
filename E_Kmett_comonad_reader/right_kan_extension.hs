-- Edward Kmett, Kan Extensions
-- http://comonad.com/reader/2008/kan-extensions/

{-# LANGUAGE ExistentialQuantification #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE FlexibleInstances #-}

import Control.Monad
import Control.Monad.Identity

{--
right Kan Extension of h along g
 --}
newtype Ran g h a = Ran
  { runRan :: forall b. (a -> g b) -> h b }

{-- Like continuatio monad transofmer
but has 2 functors
newtype ContT r m a = ContT
  { runContT :: (a -> m r) -> m r }
--}

{-- Functor instance for Right Kan extension
does not require
 --}

instance Functor (Ran g h) where
  -- fmap :: (a -> b) -> f a -> f b
  fmap f m = Ran (\k -> runRan m (k . f))

{-- Codensity monad
is a monad generated by right Kan extension of functor f alog itself
 --}

{--
instance Applicative (Ran f f) where
  -- pure :: a -> f a
  pure x = Ran (\k -> k x)
  -- (<*>) :: f (a -> b) -> f a -> f b TODO


instance Monad (Ran f f) where
  -- return :: a -> m a
  return x = Ran (\k -> k x)
  -- (>>=) :: m a -> (a -> m b) -> m b
  m >>= k = Ran (\c -> runRan m (\a -> runRan (k a) c))
--}

{-- Janis VoigtlÃ¤nder monad
from:  Asymptotic improvement of functions over Free Monads
http://www.janis-voigtlaender.eu/papers/AsymptoticImprovementOfComputationsOverFreeMonads.pdf

improve performance of free monads
like right Kan extension with another monad along itself
lika ConT but with universal quantification
--}

newtype C m a = C (forall b. (a -> m b) -> m b)

{-- Yoneda lemma --}

check :: Functor f => f a -> (forall b . (a -> b) -> f b)
check a f = fmap f a

uncheck :: (forall b . (a -> b) -> f b) -> f a
uncheck t = t id

{--
type Yoneda = Ran Identity

check2 :: Functor f => f a -> Yoneda f a
check2 a = Ran (\\f -> fmap (runIdentity . f) a)

--uncheck2 :: Yoneda f a -> f a
uncheck2 t = runRan t Identity
--}

{-- Limits
only non-cheting member of Lim Maybe a is Nothing
of Lim [] a is []
--}

data Trivial a = Trivial

instance Functor Trivial where
  fmap f _ = Trivial

trivialize :: a -> Trivial b
trivialize _ = Trivial

type Lim = Ran Trivial

{-- Left Kan extension

they are like state in context comonad transformer
http://stackoverflow.com/questions/8766246/what-is-the-store-comonad
http://dlaing.org/cofun/
--}
